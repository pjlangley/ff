name: core fragments

on:
  push:
    branches:
      - main

jobs:
  ff_node:
    runs-on: ubuntu-latest
    name: node.js
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/setup
      - name: store solana program keys into environment variables
        run: cat program_keys.env >> $GITHUB_ENV
      - run: |
          docker build \
            --force-rm \
            --build-arg NODE_VERSION=22 \
            --build-arg DENO_VERSION=2.1.6 \
            -f docker.node.Dockerfile \
            -t ff_node .
      - name: run all fragments
        run: docker run --rm --network ci-network --env CI=$CI ff_node
      - name: unit tests
        run: |
          docker run --rm \
          --network ci-network \
          --env CI=$CI \
          --env counter_PROGRAM_ID=$counter_PROGRAM_ID \
          ff_node \
          --run test
      - name: lint
        run: docker run --rm ff_node --run lint
      - name: typescript check
        run: docker run --rm ff_node --run tsc
      - name: format check
        run: docker run --rm ff_node --run format:check

  ff_python:
    runs-on: ubuntu-latest
    name: python
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/setup
      - name: store solana program keys into environment variables
        run: cat program_keys.env >> $GITHUB_ENV
      - run: |
          docker build \
            --force-rm \
            --build-arg PYTHON_VERSION=3.12.4 \
            -f docker.python.Dockerfile \
            -t ff_python .
      - name: run all fragments
        run: docker run --rm --network ci-network --env CI=$CI ff_python
      - name: unit tests
        run: |
          docker run --rm \
          --network ci-network \
          --env CI=$CI \
          --env counter_PROGRAM_ID=$counter_PROGRAM_ID \
          ff_python \
          -m unittest -v --failfast
      - name: type check
        run: docker run --rm --entrypoint mypy ff_python --config-file mypy.ini
      - name: lint
        run: docker run --rm --entrypoint pylint ff_python ./fragments --rcfile ./pylintrc
      - name: format check
        run: docker run --rm --entrypoint black ff_python ./fragments --check

  ff_rust:
    runs-on: ubuntu-latest
    name: rust
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/setup
      - name: store solana program keys into environment variables
        run: cat program_keys.env >> $GITHUB_ENV
      - run: |
          docker build \
            --force-rm \
            --build-arg RUST_VERSION=1.85.1 \
            -f docker.rust.Dockerfile \
            -t ff_rust .
      - name: run all fragments
        run: docker run --rm --network ci-network --env CI=$CI --entrypoint target/debug/fragments ff_rust
      - name: unit tests
        run: docker run --rm --network ci-network --env CI=$CI --entrypoint cargo ff_rust test
      - name: lint
        run: docker run --rm --entrypoint cargo ff_rust clippy -- -D warnings
      - name: format check
        run: docker run --rm --entrypoint cargo ff_rust fmt -v --check

  ff_go:
    runs-on: ubuntu-latest
    name: go
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/setup
      - name: store solana program keys into environment variables
        run: cat program_keys.env >> $GITHUB_ENV
      - run: |
          docker build \
            --force-rm \
            --build-arg GO_VERSION=1.23.1 \
            --build-arg ALPINE_VERSION=3.20 \
            --build-arg GO_CI_LINT_VERSION=1.61.0 \
            -f docker.go.Dockerfile \
            -t ff_go .
      - name: run all fragments
        run: docker run --rm --network ci-network --env CI=$CI --entrypoint .bin/go_ff ff_go
      - name: unit tests
        run: docker run --rm --network ci-network --env CI=$CI --entrypoint go ff_go test ./fragments/...
      - name: lint
        run: docker run --rm --entrypoint golangci-lint ff_go run -v ./fragments/...
      - name: format check
        run: docker run --rm --entrypoint test ff_go -z $(gofmt -l ./fragments)